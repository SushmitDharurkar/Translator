
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class NewJDialog extends javax.swing.JDialog {

    /**
     * Creates new form NewJDialog
     */
    public NewJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comp = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaDesc = new javax.swing.JTextArea();
        err = new javax.swing.JButton();
        translate = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaSrc = new javax.swing.JTextArea();
        desLanguage = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comp1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Translator");

        comp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        comp.setText("Complete Interaction");
        comp.setToolTipText("");
        comp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compActionPerformed(evt);
            }
        });

        textAreaDesc.setColumns(20);
        textAreaDesc.setFont(new java.awt.Font("Monospaced", 0, 20)); // NOI18N
        textAreaDesc.setLineWrap(true);
        textAreaDesc.setRows(5);
        jScrollPane1.setViewportView(textAreaDesc);

        err.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        err.setText("Error");
        err.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errActionPerformed(evt);
            }
        });

        translate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        translate.setText("Translate");
        translate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                translateActionPerformed(evt);
            }
        });

        textAreaSrc.setColumns(20);
        textAreaSrc.setFont(new java.awt.Font("Monospaced", 0, 20)); // NOI18N
        textAreaSrc.setLineWrap(true);
        textAreaSrc.setRows(5);
        jScrollPane2.setViewportView(textAreaSrc);

        desLanguage.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        desLanguage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "English", "Spanish", "Hindi", "Chinese Simplified", "Chinese Traditional", "Korean", "Thai", "Afrikaans", "Arabic", "Bosnian (Latin)", "Bulgarian", "Catalan", "Croatian", "Czech", "Danish", "Dutch", "Estonian", "Finnish", "French", "German", "Greek", "Haitian Creole", "Hebrew", "Hmong Daw", "Hungarian", "Indonesian", "Italian", "Japanese", "Kiswahili", "Klingon", "Klingon (pIqaD)", "Korean", "Latvian", "Lithuanian", "Malay", "Maltese", "Norwegian", "Persian", "Polish", "Portuguese", "Quer√©taro Otomi", "Romanian", "Russian", "Serbian (Cyrillic)", "Serbian (Latin)", "Slovak", "Slovenian", "Swedish", "Turkish", "Ukrainian", "Urdu", "Vietnamese", "Welsh", "Yucatec Maya" }));
        desLanguage.setName(""); // NOI18N
        desLanguage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desLanguageActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Translated text: ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Enter text here: ");

        comp1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        comp1.setText("Completed Survey");
        comp1.setToolTipText("");
        comp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comp1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(237, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(err)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comp)
                            .addGap(81, 81, 81)
                            .addComponent(comp1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(151, 151, 151))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(desLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(89, 89, 89)
                                    .addComponent(translate))
                                .addComponent(jLabel1))
                            .addGap(393, 393, 393)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(231, 231, 231))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(translate)
                    .addComponent(desLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(err)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comp1)
                        .addComponent(comp)))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    String code = "en";
    int errorCount = 0;
    private void desLanguageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desLanguageActionPerformed
        // TODO add your handling code here:
        String item = (String)desLanguage.getSelectedItem();
        
        if (item.equals("English")){
            code = "en";
        }
        else if (item.equals("Hindi")){
            code = "hi";
        }
        else if (item.equals("Spanish")){
            code = "es";
        }
        else if (item.equals("Chinese Simplified")){
            code = "zh-CHS";
        }
        else if (item.equals("Chinese Traditional")){
            code = "zh-CHT";
        }
        else if (item.equals("Afrikaans")){
            code = "af";
        }
        else if (item.equals("Thai")){
            code = "th";
        }
        else if (item.equals("Korean")){
            code = "th";
        }
        else if (item.equals("Arabic")){
            code = "ar";
        }
        else if (item.equals("Bosnian (Latin)")){
            code = "bs-Latn";
        }
        else if (item.equals("Bulgarian")){
            code = "bg";
        }
        else if (item.equals("Catalan")){
            code = "ca";
        }
        else if (item.equals("Croatian")){
            code = "hr";
        }
        else if (item.equals("Czech")){
            code = "cs";
        }else if (item.equals("Danish")){
            code = "da";
        }
        else if (item.equals("Dutch")){
            code = "nl";
        }
        else if (item.equals("Estonian")){
            code = "et";
        }
        else if (item.equals("Finnish")){
            code = "fi";
        }
        else if (item.equals("French")){
            code = "fr";
        }
        else if (item.equals("German")){
            code = "de";
        }
        else if (item.equals("Greek")){
            code = "el";
        }
        else if (item.equals("Haitian Creole")){
            code = "ht";
        }
        else if (item.equals("Hebrew")){
            code = "he";
        }
        else if (item.equals("Hmong Daw")){
            code = "mww";
        }
        else if (item.equals("Hungarian")){
            code = "hu";
        }
        else if (item.equals("Indonesian")){
            code = "id";
        }
        else if (item.equals("Italian")){
            code = "it";
        }
        else if (item.equals("Japanese")){
            code = "ja";
        }
        else if (item.equals("Kiswahili")){
            code = "sw";
        }
        else if (item.equals("Klingon")){
            code = "tlh";
        }
        else if (item.equals("Klingon (pIqaD)")){
            code = "tlh-Qaak";
        }
        else if (item.equals("Latvian")){
            code = "lv";
        }
        else if (item.equals("Lithuanian")){
            code = "lt";
        }
        else if (item.equals("Malay")){
            code = "ms";
        }
        else if (item.equals("Maltese")){
            code = "mt";
        }
        else if (item.equals("Norwegian")){
            code = "no";
        }
        else if (item.equals("Persian")){
            code = "fa";
        }
        else if (item.equals("Polish")){
            code = "pl";
        }
        else if (item.equals("Portuguese")){
            code = "pt";
        }
        else if (item.equals("Quer√©taro Otomi")){
            code = "otq";
        }
        else if (item.equals("Romanian")){
            code = "ro";
        }
        else if (item.equals("Russian")){
            code = "ru";
        }
        else if (item.equals("Serbian (Cyrillic)")){
            code = "sr-Cyrl";
        }
        else if (item.equals("Serbian (Latin)")){
            code = "sr-Latn";
        }
        else if (item.equals("Slovak")){
            code = "sk";
        }
        else if (item.equals("Slovenian")){
            code = "sl";
        }
        else if (item.equals("Swedish")){
            code = "sv";
        }
        else if (item.equals("Turkish")){
            code = "tr";
        }
        else if (item.equals("Ukrainian")){
            code = "uk";
        }
        else if (item.equals("Urdu")){
            code = "ur";
        }
        else if (item.equals("Vietnamese")){
            code = "vi";
        }
        else if (item.equals("Welsh")){
            code = "cy";
        }
        else if (item.equals("Yucatec Maya")){
            code = "yua";
        }
        
    }//GEN-LAST:event_desLanguageActionPerformed

    private void compActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compActionPerformed
        // TODO add your handling code here:
        //GOTO QUALTRICS PAGE: //https://qtrial2017q1az1.qualtrics.com/SE/?SID=SV_7OmeyeWKsiFoeA5
        
        File f = new File("LogFile.txt");
        try {
            f.createNewFile();
            FileWriter fw = new FileWriter(f.getAbsolutePath());
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write("Error Count: " + errorCount);
            
            bw.close();
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(NewJDialog.class.getName()).log(Level.SEVERE, null, ex);
        }

        Desktop d = Desktop.getDesktop();
        try {
            d.browse(new URI ("https://qtrial2017q1az1.qualtrics.com/SE/?SID=SV_7OmeyeWKsiFoeA5"));
        } catch (URISyntaxException ex) {
            Logger.getLogger(NewJDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewJDialog.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_compActionPerformed

    private void translateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_translateActionPerformed
        // TODO add your handling code here:
        String input = textAreaSrc.getText();
         Translator t;
        try {
            t = new Translator();
            String output = t.translate(input, code);
            textAreaDesc.setText(output);
        } catch (IOException ex) {
            Logger.getLogger(NewJDialog.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_translateActionPerformed

    private void errActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errActionPerformed
        // TODO add your handling code here:
        errorCount++;
        textAreaSrc.setText("");
        textAreaDesc.setText("");
    }//GEN-LAST:event_errActionPerformed

    private void comp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comp1ActionPerformed
        // TODO add your handling code here:
       //How will I get these count values??
        // System.out.println(errorCount);
        System.exit(0);
    }//GEN-LAST:event_comp1ActionPerformed

    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewJDialog dialog = new NewJDialog(new javax.swing.JFrame(), true);
              
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
      
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton comp;
    private javax.swing.JButton comp1;
    private javax.swing.JComboBox<String> desLanguage;
    private javax.swing.JButton err;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea textAreaDesc;
    private javax.swing.JTextArea textAreaSrc;
    private javax.swing.JButton translate;
    // End of variables declaration//GEN-END:variables
    
    
    
}
